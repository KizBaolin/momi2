TODO:

next steps:

***
remove all TODO (grep for it)

***
have compute_sfs, log_likelihood_prf,
take in a ms_cmd,
instead of a demography


***
tau = inf in ExponentialHistory currently disabled because it breaks automatic differentiation


***
uncomment assertions in size_history, sum_product
copy assertions in ConstantTruncatedSizeHistory.etjj to other etjj



***
have parse_ms call constructor of Demography instead of nx?
OR
move stuff from parse_ms into demography.py, have it be called
from constructor of Demography?

***
Make autodifferentiation work for functional size history
allow functional size history to be passed in with ms style cmd

in the meantime, comment it out, or have it raise an exception...

***
put things into __init__


***
find minimal example test case for autograd issue #24


***
merge some of my_functions into autograd package with pull request


***
add back numerical stability assertions, etc.
(things seem a little more unstable right now in the gradient descent)


***
reimplement expm_multiply (need derivative)


***
Try expokit stuff in expokit branch


***
Two sources of numerical error:

1) FFT convolution: when vector has a 0.0 sometimes small negative numbers result
however, in our case the 0.0 is always at the beginning or end of vector
so can make FFT convolution more robust by truncating ends as necessary

2) matrix exponential when t is very small, and v has 0s in it
seems like the scipy.sparse.linalg.expm_multiply might be more robust in this case
investigate the timing too



***
for parse ms, let -es specificy the label of the new population
this will be required to avoid confusion over population labels when fitting times of events

***
compare which version of expm_multiply is faster (with and without derivatives)



***
Make functional size history work with autodifferentiation! Right now assumes it's a constant function always

***
be consistent with leaves vs leafs (leaves is demography property, leafs is argument to parse_ms)

***
get rid of from_newick, to_newick in parse_ms?

***
for simulate_sfs, make theta=None work when -r is set
(right now it counts up the total branch length, but doesn't know
how to deal with multiple trees)

***
replace cached_property module (v1.0.0 not compatible with using nx.DiGraph)


***
add option to simulate from ms instead of scrm

***
test in what regime expm_multiply is better than eigenvalue
internally decide which one to use based on the regime

***
store sumCounts, sumSqCounts, nonzeroCounts in a single object?

***
change everything to be in ms units

***
remove @memoize_instance?

***
add back from __future__ import division