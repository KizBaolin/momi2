TODO:

next steps:

***
let pop indices in ms command also be variables
(so that it is easier to construct ms commands with splits)

create an example.py with a simple (no) exponential growth, and a 4 pop model with migration (where the pop labels might vary)

also, use new Hessian, Hessian_vector_product wrappers in autograd

***
remove all TODO (grep for it)

***
are SFS numerical checks too stringent?
for some demographies end up with a lot of 0 entries
(also note, a single 0 entry will destroy the log_likelihood_prf)

perhaps using a row-wise truncate0 instead?
(i kind of like the idea of the global truncate0 though...)

ALTERNATIVELY:
when computing log_likelihood_prf, add 1e-30 to all sfs_entries
(to prevent taking log of 0.0)
(do this by having an EPSILON parameter in log_likelihood_prf, with default value of 0.0)

***
add an "ms_cmd" property to Demography

***
rename test_basinhopping. (turn it into example.py?)

run it a bunch more, to figure out when it tries to get nan demographies
(use Werror flag)

***
Make autodifferentiation work for functional size history
allow functional size history to be passed in with ms style cmd

***
put things into __init__

***
find minimal example test case for autograd issue #24

***
merge some of my_functions into autograd package with pull request

***
for simulate_sfs, make theta=None work when -r is set
(right now it counts up the total branch length, but doesn't know
how to deal with multiple trees)

***
add option to simulate from ms instead of scrm

***
store sumCounts, sumSqCounts, nonzeroCounts in a single object?
OR
name it sfs_counts, sq_counts, nonzero_counts instead

***
change everything to be in ms units

***
add back from __future__ import division

***
get rid of Demography.from_newick
get rid of from_newick, to_newick in parse_ms

***
tau = inf in ExponentialHistory currently disabled because it breaks automatic differentiation