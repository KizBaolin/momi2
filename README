TODO:

next steps:

***
be consistent with leaves vs leafs (leaves is demography property, leafs is argument to parse_ms)
OR
remove leafs argument from parse_ms altogether

***
let pop indices in ms command also be variables
(so that it is easier to construct ms commands with splits)

also change node label convention, so that new pops get the ms label

create an example.py with a simple (no) exponential growth, and a 4 pop model with migration (where the pop labels might vary)

***
remove all TODO (grep for it)

***
use Demography constructor, rather than
Demography.from_ms

also get rid of
Demography.from_newick


***
tau = inf in ExponentialHistory currently disabled because it breaks automatic differentiation


***
Make autodifferentiation work for functional size history
allow functional size history to be passed in with ms style cmd

in the meantime, comment it out, or have it raise an exception...
(perhaps by having it call autograd.scipy, which should hopefully crash...)

***
put things into __init__


***
find minimal example test case for autograd issue #24


***
merge some of my_functions into autograd package with pull request


***

reimplement expm_multiply (need derivative)

compare which version of expm_multiply is faster (with and without derivatives)
in what regime is each faster?

Try expokit stuff in expokit branch


***
add back numerical stability assertions, etc.
(things seem a little more unstable right now in the gradient descent)

uncomment assertions in size_history, sum_product
copy assertions in ConstantTruncatedSizeHistory.etjj to other etjj

Two sources of numerical error:
1) FFT convolution: when vector has a 0.0 sometimes small negative numbers result
however, in our case the 0.0 is always at the beginning or end of vector
so can make FFT convolution more robust by truncating ends as necessary

2) matrix exponential when t is very small, and v has 0s in it
seems like the scipy.sparse.linalg.expm_multiply might be more robust in this case
investigate the timing too


***
for parse ms, let -es specificy the label of the new population
this will be required to avoid confusion over population labels when fitting times of events


***
get rid of from_newick, to_newick in parse_ms?

***
for simulate_sfs, make theta=None work when -r is set
(right now it counts up the total branch length, but doesn't know
how to deal with multiple trees)


***
add option to simulate from ms instead of scrm


***
store sumCounts, sumSqCounts, nonzeroCounts in a single object?

***
change everything to be in ms units

***
remove @memoize_instance?

***
add back from __future__ import division