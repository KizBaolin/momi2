* documentation
* polish tutorial
** add pairwise distances cell
* clean up, rename fstats
  rename to model_fit_Stats or somesuch?
* fix up p_missing estimation
  first, provide an option to not use it (in case it is already factored into theta)
  second, use the same method for Sfs and SnpAlleleCounts
* method to easily estimate mutation rate
* store (jackknifed) Sfs in json, pass to set_data()
  using SnpAlleleCounts is too slow and memory intensive
* link Demography graph to DemoPlotter more directly
  so that DemoPlotter can easily show if there is a bug or not
* clean up confidence region stuff
  Options:
  1) Delete it entirely
  2) DemoModel has method for testing/CI
  3) DemoModel returns a GodambeConfRegion object which contains all the user-facing methods
  
     Leaning towards option (3).
     
     Don't have any of the delta method scaling business though. Just create a scaled/unscaled Godambe object by passing in a scaled/unscaled demo function directly
  
     Currently leaning towards cleaning it up and documenting it, but not illustrating it in the tutorial.

* make SfsLikelihoodSurface not accessible to user
* get all unit tests working
* method to compute tensor product, other stats
  and document it
  
  this should be united with fstats somehow
* Fix demo_plotter RuntimeWarning
  /nfs/team118/jk21/miniconda3/lib/python3.6/site-packages/momi/demo_plotter
.py:35: RuntimeWarning: invalid value encountered in double_scalars
  -self.curr_g * (nxt_t - self.curr_t))
  
* sometimes have sfs/denom be 0/0 in multinomial likelihood
  only in extreme cases when N is tiny or huge. should we try to fix this?

* rename Demography to MultipopMoran
* use per-base mutation rate?
  require user to supply total number of bases
* improve drawing api
* add test for inferring mutation rate
  both with hets, and with total branch len
  (also check if I am scaling mutation rate correctly internally!)
* do some of the data parsing in C?
